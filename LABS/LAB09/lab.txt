Crie um service principal

Build an Azure DevOps Pipeline for Terraform
2 hours duration
Practitioner
Videos
Guide
Build an Azure DevOps Pipeline for Terraform
Introduction
Welcome to the Build an Azure DevOps Pipeline for Terraform lab. In this lab, we will cover six objectives:

Create an Azure DevOps project
Prepare the Remote State Backend
Connect to the Azure subscription
Create a Planning Pipeline
Create an Apply Pipeline
Deploy Infrastructure with the Pipelines
By the end of this lab, you'll be ready to create and deploy Infrastructure as Code using Azure DevOps and Terraform.

Additional Information and Resources
You are a DevOps engineer at Globomantics. The company has standardized on using Azure DevOps for both source control and pipeline automation. You have been tasked with putting together a series of Azure DevOps pipelines to automate the deployment of a Terraform configuration to an Azure subscription.

The following resources have been provided to you by Globomantics:

A Terraform configuration for deploying a VNet
An Azure storage account for remote state
An Entra ID service principal for automation
An Azure resource group to use for deployments
It's up to you to create two Azure DevOps pipelines:

Plan on PR: Run an execution plan when a pull request targeting the main branch is created or updated and store the resulting plan file.
Apply on merge: Run an apply when a pull request targeting the main branch is merged using the stored plan file.
To successfully complete the lab, you'll need the following:

VS Code (or a similar code editor)
Terraform CLI
Azure CLI
Azure DevOps subscription (free tier)
NOTE: If you create a new Azure DevOps organization using the Free tier, you may not be allocated any parallel jobs to run pipelines on the Microsoft-hosted agent pool. More information can be found here. You have three options:

Fill out the form requesting allocation of parallel jobs for the Free tier (1-3 days).
Create a self-hosted agent on your local workstation following the directions found here.
Deploy a self-hosted agent to Azure using the lab sandbox.
Instructions for deploying a self-hosted agent to Azure can be found in an addendum at the end of this lab guide.

Solution
Create an Azure DevOps project
In this objective, you will create a new Azure DevOps project and import the existing repository into Azure Repos.

Create a new account or log into Azure DevOps. NOTE: If you are creating a new account, you may not be allocated any parallel jobs for pipelines. Check the additional information section of the lab for potential workarounds.
Create a new private project called tacowagon-network.
Inside the new project navigate to Repos.
Click on Import to import code from an external repository.
Leave the default of Git and paste in the GitHub repository: https://github.com/ned1313/azure-simple-vnet.git
Click on Import to complete the process.
Prepare the Remote State Backend
In this objective, you will retrieve the values to use for setting up the azurerm remote backend for the Terraform configuration. The values will be stored in a variable group in the Pipelines Library.

Log into the Azure CLI or Portal using the provided username and password credentials. (Do not use the service principal)
az login
Retrieve the resource group and storage account names from the lab.
az group list --query [].name
az storage account list --query [].name
Retrieve the subscription ID, name, and tenant ID from the lab.
az account show
Navigate to the Pipelines portion of the Azure DevOps project.
Click on the Library section.
Create a variable group in the Pipelines Library called state-data with entries for the following:
BACKEND_RESOURCE_GROUP_NAME - Resource group name
BACKEND_AZURE_STORAGE_ACCOUNT_NAME - Storage account name
BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME - tfstate
BACKEND_AZURE_STORAGE_ACCOUNT_KEY_NAME - terraform.tfstate
BACKEND_TENANT_ID - Tenant ID
BACKEND_CLIENT_ID - Application Client ID from the service principal
BACKEND_CLIENT_SECRET - Secret from the service principal
BACKEND_SUBSCRIPTION_ID - Subscription ID
Set the BACKEND_CLIENT_SECRET to a secret variable by clicking on the lock icon.
Save the variable group.
Connect to the Azure subscription
In this objective, you will create and verify a service connection between the Azure DevOps project and the Azure Subscription using the provided service principal.

Navigate to the Project settings.
Click on Service connections.
Click on Create service connection and select Azure Resource Manager.
Select Service principal (manual).
Enter the following values:
Subscription ID - from previous objective
Subscription Name - from previous objective
Service Principal Id - Application Client ID from the service principal
Service Principal Key - Secret from the service principal
Tenant ID - from previous objective
Service connection name: tacowagon-dev
Check the box to grant access permission to all pipelines.
Click on Verify and save the Service Connection.
Create a Planning Pipeline
In this objective, you will create a pipeline in Azure DevOps that runs when a pull request is created targeting the main branch and produces an execution plan to save for deployment later.

Install the Terraform extension from the Visual Studio Marketplace.
In the Azure DevOps project, navigate to the Pipelines section.
Click on Create pipeline.
Select Azure Repos Git.
Select the repository for the project.
Choose the Starter pipeline.
Change the name of the file to pr-plan.yml.
Replace the contents of the file with the following linked code: https://raw.githubusercontent.com/pluralsight-cloud/Advanced-Terraform-with-Azure/main/lab_files/s5lab1/pr-plan.yml
If you are using a self-hosted pool, update the pool section for each job as follows:
pool: aci-agents # Set to your pool name if different
Save the pipeline directly to the main branch, but do not run it yet.
Go back to the Pipelines section and click on the All pipelines tab.
Click on the three dots next to the new pipeline and select Rename/move.
Rename the pipeline to pr-plan.
Create an Apply Pipeline
In this objective, you will create a pipeline in Azure DevOps that runs when a commit is made on the main branch, running a terraform apply action using the stashed execution plan.

In the Azure DevOps project, navigate to the Pipelines section.
Click on New pipeline.
Select Azure Repos Git.
Select the repository for the project.
Choose the Starter pipeline.
Change the name of the file to merge-apply.yml.
Replace the contents of the file with the following linked code: https://raw.githubusercontent.com/pluralsight-cloud/Advanced-Terraform-with-Azure/main/lab_files/s5lab1/merge-apply.yml
If you are using a self-hosted pool, update the pool section for each job as follows:
pool: aci-agents # Set to your pool name if different
Save the pipeline directly to the main branch, but do not run it yet.
Go back to the Pipelines section and click on the All pipelines tab.
Click on the three dots next to the new pipeline and select Rename/move.
Rename the pipeline to merge-apply.
Deploy Infrastructure with the Pipelines
NOTE: If you receive the error: No hosted parallelism has been purchased of granted when the pr-plan pipeline runs, refer to the Additional Information and Resources section of the lab or follow the directions in the Addendum below to provision a self-hosted agent pool.

In this objective, you will promote a change to the Terraform configuration causing both pipelines to run and deploy the VNet in the target resource group.

Navigate to the Pipelines Library.
Click on the state-data variable group.
Click on Pipeline permissions and add the pr-plan and merge-apply pipelines to the group.
Navigate to the Branches section of Repos.
Click the three dots next to the main branch and select Branch policies.
Add a Build Validation policy for the pr-plan pipeline, leaving the defaults and click on Save.
Navigate back to the Branches section of Repos.
Click on New branch and create a branch called first-deploy.
Click on the new branch and then on the terraform.tfvars file.
Click on Edit and give the RESOURCE_GROUP_NAME the correct value.
Click on Commit and commit the change directly to the first-deploy branch.
Click on Create a pull request, leave the defaults, and click on Create.
Verify the pr-plan pipeline fires and completes successfully. Adjust as needed.
Click on Complete and merge the pull request.
Verify that the merge-apply pipeline fires and completes successfully. Adjust as needed.
Conclusion
Congratulations! You have successfully completed the Build an Azure DevOps Pipeline for Terraform lab.

Addendum
Creating a Self-hosted Agent in Azure
As noted in the lab overview, the Free tier on Azure DevOps does not include any parallel jobs for pipelines using the Microsoft-hosted agent pool. As an alternative to waiting 1-3 days for an allocation request to be approved, you can choose to host an agent pool using Azure Container Instances in the lab sandbox. The following directions will instruct you on deploying the agent pool and updating your pipelines to use it:

Copy the Terraform configuration found here to your local workstation.

Create a Personal Access Token in your Azure DevOps account with Full Access permissions.

Create a terraform.tfvars file from the terraform.tfvars.example file and update the following values:

resource_group_name - Set to the lab provided resource group.
azp_token - Set to the PAT created in the previous step.
azp_org_name - Set to your Azure DevOps organization name.
Deploy the Terraform configuration:

terraform init
terraform apply -auto-approve
The configuration will create a new agent pool in your Azure DevOps organization called aci-agents and add the deployed container as an agent.

Once you are ready to create your pipelines, set both to use the new agent pool:

# Before
pool:
  vmImage: ubuntu-latest
# After
pool: aci-agents
You will need to grant each pipeline permission to use the agent pool when prompted.